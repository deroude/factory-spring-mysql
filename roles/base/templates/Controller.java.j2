package {{ group }}.{{ artifact }}.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
{% if entity.category == 'AUTHENTICATION_ENTITY' %}
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
{% endif %}

import java.util.Optional;

import {{ group }}.{{ artifact }}.domain.{{ entity.name }};
import {{ group }}.{{ artifact }}.repository.{{ entity.name }}Repository;

@RestController
@RequestMapping("/{{entity.name|lower}}")
public class {{ entity.name }}Controller {

    private final {{ entity.name }}Repository {{entity.name|lower}}Repository;
    {% if entity.category == 'AUTHENTICATION_ENTITY' %}
    private final BCryptPasswordEncoder passwordEncoder;
    {% endif %}

    {% if entity.category == 'AUTHENTICATION_ENTITY' %}
    @Autowired
    public {{ entity.name }}Controller(final {{ entity.name }}Repository {{entity.name|lower}}Repository, BCryptPasswordEncoder passwordEncoder){
        this.{{entity.name|lower}}Repository = {{entity.name|lower}}Repository;
        this.passwordEncoder = passwordEncoder;
    }
    {% else %}
    @Autowired
    public {{ entity.name }}Controller(final {{ entity.name }}Repository {{entity.name|lower}}Repository){
        this.{{entity.name|lower}}Repository = {{entity.name|lower}}Repository;
    }
    {% endif %}

    @GetMapping
    public Page<{{ entity.name }}> get{{ entity.name }}List (@RequestParam(value = "search", required = false) final String search, final Pageable pageSpecification) {
        {% for field in fields if field.attributes|selectattr("name","equalto","display")|selectattr("value","equalto",true)|list|length >0 %}
        return this.{{ entity.name|lower }}Repository.findBy{{ field.name|capitalize }}Like("%"+(search==null?"":search)+"%", pageSpecification);
        {% else %}
        return this.{{ entity.name|lower }}Repository.findAll(pageSpecification);
        {%- endfor %}
    }

    @GetMapping("/{id}")
    public ResponseEntity<{{ entity.name }}> get{{ entity.name }}ById(@PathVariable("id") final Long id){
        return this.{{ entity.name|lower }}Repository
                .findById(id)
                .map({{ entity.name|lower }}->ResponseEntity.ok({{ entity.name|lower }}))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public {{ entity.name }} new{{ entity.name }} (@RequestBody final {{ entity.name }} {{ entity.name|lower}}) {
        {% if entity.category == 'AUTHENTICATION_ENTITY' %}
        {{ entity.name|lower}}.setPassword(this.passwordEncoder.encode({{ entity.name|lower}}.getPassword()));
        {% endif %}
        return this.{{ entity.name|lower }}Repository.saveAndFlush({{ entity.name|lower}});
    }

    @DeleteMapping("/{id}")
    public void delete{{ entity.name }} (@PathVariable("id") final Long id) {
       this.{{ entity.name|lower }}Repository.deleteById(id);
    }

}